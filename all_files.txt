.\App.xaml：
【﻿
<Application x:Class="WordPopupApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WordPopupApp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Application.Resources>
</Application>】

.\App.xaml.cs：
【﻿using System.Configuration;
using System.Data;
using System.Windows;

namespace WordPopupApp
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }

}
】

.\AssemblyInfo.cs：
【using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]
】

.\MainWindow.xaml：
【﻿<Window x:Class="WordPopupApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WordPopupApp"
        mc:Ignorable="d"
        Title="划词翻译设置 (快捷键: Ctrl+Z)" Height="300" Width="400"
        Loaded="Window_Loaded" Closing="Window_Closing"
        FontFamily="Microsoft YaHei UI">
    <Grid Margin="20">
        <StackPanel>
            <TextBlock Text="Anki 设置" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>

            <TextBlock Text="目标牌组 (Deck Name):"/>
            <!-- 改为下拉列表，数据源为运行时获取的牌组 -->
            <ComboBox x:Name="DeckComboBox" Margin="0,5,0,10" />

            <Button Content="编辑模板" Click="EditTemplateButton_Click" Width="100" HorizontalAlignment="Left" Margin="10,0,0,0"/>


            <Button Content="保存设置" Click="SaveButton_Click" Width="100" HorizontalAlignment="Left" Margin="0,20,0,0"/>

            <TextBlock Text="使用说明：最小化本窗口后，在任何地方选中英文单词，按 Ctrl + Q 即可查询。"
                       TextWrapping="Wrap" Margin="0,40,0,0" Foreground="Gray"/>
        </StackPanel>
    </Grid>
</Window>】

.\MainWindow.xaml.cs：
【﻿using System;
using System.Threading.Tasks;
using System.Windows;
using WordPopupApp.Services;
using WordPopupApp.Models;
using WordPopupApp.ViewModels;
using WordPopupApp.Views;
using System.Windows.Interop;
using System.Windows.Input;
using System.Net.Http;
using Newtonsoft.Json;
using System.Text;
using Newtonsoft.Json.Linq;

namespace WordPopupApp
{
    public partial class MainWindow : Window
    {
        private GlobalHotKey _hotKey;
        private readonly DictionaryService _dictionaryService;
        private readonly AnkiService _ankiService;
        private readonly SettingsService _settingsService;
        private AppSettings _currentSettings;

        public MainWindow()
        {
            InitializeComponent();
            _dictionaryService = new DictionaryService();
            _ankiService = new AnkiService();
            _settingsService = new SettingsService();
        }

        private async void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // 加载设置
            // 加载设置
            _currentSettings = _settingsService.LoadSettings();

            // 动态获取 Anki 中现有的 Deck 与 Model
            try
            {
                var deckNames = await _ankiService.GetDeckNamesAsync();
                DeckComboBox.ItemsSource = deckNames;
                DeckComboBox.SelectedItem = deckNames.Contains(_currentSettings.AnkiDeckName)
                    ? _currentSettings.AnkiDeckName
                    : deckNames.FirstOrDefault();

                // 默认 note type，不用再加载
                _currentSettings.AnkiModelName = "WordPopUpNote"; // 你的固定type名
            }
            catch (Exception ex)
            {
                MessageBox.Show($"无法连接到 Anki (请确认已安装并运行 AnkiConnect)：{ex.Message}");
            }

            // 注册全局热键 Ctrl + Z
            try
            {
                uint vk = (uint)KeyInterop.VirtualKeyFromKey(Key.Z);  // 把 WPF 的 Key 转成 VK
                _hotKey = new GlobalHotKey(this, HotKeyModifiers.MOD_CONTROL, vk);
                // Virtual-Key Codes: https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
                _hotKey.HotKeyPressed += OnHotKeyPressed;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"注册热键失败: {ex.Message}");
            }
        }

        private async void OnHotKeyPressed()
        {
            // 1. 模拟Ctrl+C复制选中内容
            GlobalHotKey.SimulateCtrlC();

            // 2. 从剪贴板获取文本
            string selectedText = GlobalHotKey.GetTextFromClipboard()?.Trim();

            if (string.IsNullOrEmpty(selectedText))
            {
                return;
            }

            // 3. 异步查询
            var entry = await _dictionaryService.LookupAsync(selectedText);

            // 4. 创建ViewModel和View
            var viewModel = new PopupResultViewModel(entry, _ankiService, _currentSettings);
            var popup = new PopupResultWindow
            {
                DataContext = viewModel
            };

            // 5. 在鼠标旁显示窗口
            popup.SetPositionAndShow();
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            if (DeckComboBox.SelectedItem == null)
            {
                MessageBox.Show("请选择有效的牌组和笔记类型！");
                return;
            }
            _currentSettings.AnkiDeckName = DeckComboBox.SelectedItem.ToString();

            _settingsService.SaveSettings(_currentSettings);
            MessageBox.Show("设置已保存！");
        }
        private void EditTemplateButton_Click(object sender, RoutedEventArgs e)
        {
            var editWindow = new TemplateEditWindow(_currentSettings.CardTemplate);
            if (editWindow.ShowDialog() == true)
            {
                _currentSettings.CardTemplate = editWindow.TemplateText;
                _settingsService.SaveSettings(_currentSettings);
                MessageBox.Show("模板已保存！");
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            _hotKey?.Dispose();
        }

        public async Task EnsureWordPopUpNoteModelAsync()
        {
            const string ModelName = "WordPopUpNote";

            string[] Fields = { "单词", "释义", "笔记", "例句" };

            string FrontTemplate = @"
                <div class=""bar head"">牌组名称 : {{Deck}}</div>
                <div class=""section"">
                <div class=""expression"">{{单词}}</div>
                </div>
                ";

            string BackTemplate = @"
                <div class=""bar head"">牌组名称 : {{Deck}}</div>
                <div class=""section"">
                <div class=""expression1"">{{单词}}</div>
                <div id=""definition"" class=""items"">{{释义}}</div>
                </div>
                <div class=""section"">
                {{#笔记}}
                    <div class=""bar back"">词组详解</div>
                    <div id=""notes"" class=""items"">{{笔记}}</div>
                {{/笔记}}
                {{#例句}}
                    <div class=""bar head1"">词组例句</div>
                    <div id=""sentence"" class=""items"">{{例句}}</div>
                {{/例句}}
                </div>
                <div class=""bar foot"">
                <div id=""url"">数据源:《英语常用短语词典》</div>
                </div>
                <script type=""text/javascript"">
                var colorMap = {
                    'n.':'#e3412f',
                    'a.':'#f8b002',
                    'adj.':'#f8b002',
                    'ad.':'#684b9d',
                    'adv.':'#684b9d',
                    'v.':'#539007',
                    'vi.':'#539007',
                    'vt.':'#539007',
                    'prep.':'#04B7C9',
                    'conj.':'#04B7C9',
                    'pron.':'#04B7C9',
                    'art.':'#04B7C9',
                    'num.':'#04B7C9',
                    'int.':'#04B7C9',
                    'interj.':'#04B7C9',
                    'modal.':'#04B7C9',
                    'aux.':'#04B7C9',
                    'pl.':'#D111D3',
                    'abbr.':'#D111D3',
                };
                [].forEach.call(document.querySelectorAll('#definition'), function(div) {
                div.innerHTML = div.innerHTML
                .replace(/\b[a-z]+\./g, function(symbol) {
                    if(colorMap[symbol]) {
                    return '<a style=""background-color:' + colorMap[symbol] + '"">' +
                    symbol + '</a>';
                    }else{
                    return symbol;
                    }
                });
                });
                </script>
                ";

            string Css = @"
                <!-- 英语划词助手模板 -->
                <style>
                .card {
                font-family:微软雅黑;
                font-size: 14px;
                text-align: left;
                color:#1d2129;
                background-color:#e9ebee;
                }
                .bar{
                border-radius: 3px;
                border-bottom: 1px solid #29487d;
                color: #fff;
                padding: 5px;
                background-position : 5px center;
                text-decoration:none;
                font-size: 12px;
                color: #fff;
                font-weight: bold;
                }
                .head{
                padding-left:30px;
                background: #365899 url(_clipboard.png) no-repeat;
                background-position : 5px center;
                }
                .head1{
                padding-left:30px;
                margin-left:0px;
                background: #365899 url(_pencil.png) no-repeat;
                background-position : 5px center;
                }
                .back{
                padding-left:30px;
                margin-left:0px;
                background: #365899 url(_bulb.png) no-repeat;
                background-position : 5px center;
                }
                .foot{
                padding-right:25px;
                text-align:right;
                background: #365899 url(_cloud.png) no-repeat right;
                }
                .section {
                border: 1px solid;
                border-color: #e5e6e9 #dfe0e4 #d0d1d5;
                border-radius: 3px;
                background-color: #fff;
                position: relative;
                margin: 5px 0;
                }
                .expression{
                font-size: 35px;
                margin: 0 12px;
                padding: 20px 0 8px 0;
                border-bottom: 0px solid #e5e5e5;
                }
                .expression1{
                font-size: 35px;
                margin: 0 12px;
                padding: 20px 0 8px 0;
                border-bottom: 1px solid #e5e5e5;
                }
                .phonetic{
                font-size:24px;
                margin: 0px 12px 0px 0px;
                padding: 10px 0px 8px 0px;
                }
                .items{
                border-top: 1px solid #e5e5e5;
                line-height:1.5em;
                font-size: 18px;
                margin: 0 12px;
                padding: 10px 0 8px 0;
                }
                #definition{ line-height:1.5em;
                font-size:20px;
                border-top: 0px;
                }
                #url a{
                text-decoration:none;
                font-size: 12px;
                color: #fff;
                font-weight: bold;
                }
                #definition a {
                text-decoration: none;
                padding: 1px 6px 2px 5px;
                margin: 0 5px 0 0;
                font-size: 12px;
                color: white;
                font-weight: normal;
                border-radius: 4px
                }
                #definition a.pos_n {
                    background-color: #e3412f
                }
                #definition a.pos_v {
                    background-color: #539007
                }
                #definition a.pos_a {
                    background-color: #f8b002
                }
                #definition a.pos_r {
                    background-color: #684b9d
                }
                #sentence b{
                font-weight:      normal;
                border-radius:    3px;
                color:            #fff;
                background-color: #666;
                padding-left:     3px;
                padding-right:    3px;
                }
                .voice img{
                margin-left:5px;
                width: 24px;
                height: 24px;
                }
                </style>
                <script>
                function toggle(e){
                    var box=document.getElementById(e);
                    if(box.style.display=='none'){
                        box.style.display='block';
                    }
                    else{
                        box.style.display='none';
                    }
                }
                </script>
                ";



            // 1. 检查模型是否存在
            var existModels = await AnkiConnectRequestAsync<List<string>>("modelNames");
            if (existModels.Contains(ModelName))
            {
                // 2. 如果存在，先删除
                await AnkiConnectRequestAsync<object>("deleteModel", new { modelName = ModelName });
            }
            // 3. 新建 Note Type
            await AnkiConnectRequestAsync<object>("createModel", new
            {
                modelName = ModelName,
                inOrderFields = Fields,
                css = Css,
                cardTemplates = new[]
                {
                    new {
                        Name = "WordPopUpCard",
                        Front = FrontTemplate,
                        Back = BackTemplate
                    }
                }
            });
        }
        public async Task<T> AnkiConnectRequestAsync<T>(string action, object parameters = null)
        {
            var client = new HttpClient();
            var postObj = new
            {
                action,
                version = 6,
                @params = parameters
            };
            var resp = await client.PostAsync("http://127.0.0.1:8765", 
                new StringContent(JsonConvert.SerializeObject(postObj), Encoding.UTF8, "application/json"));
            var json = await resp.Content.ReadAsStringAsync();
            var root = JObject.Parse(json);
            if (root["error"]?.Type != JTokenType.Null)
                throw new Exception(root["error"].ToString());
            return root["result"].ToObject<T>();
        }


    }
}】

.\mergy.py：
【import os

# 排除的文件夹名（忽略大小写）
exclude_folders = {'bin', '.vs', 'obj'}

# 输出文件名
output_file = 'all_files.txt'

with open(output_file, 'w', encoding='utf-8') as outfile:
    for root, dirs, files in os.walk('.'):
        # 修改dirs可以跳过不想遍历的文件夹
        dirs[:] = [d for d in dirs if d.lower() not in exclude_folders]
        for filename in files:
            filepath = os.path.join(root, filename)
            # 跳过输出文件本身
            if os.path.abspath(filepath) == os.path.abspath(output_file):
                continue
            try:
                with open(filepath, 'r', encoding='utf-8') as infile:
                    content = infile.read()
            except Exception as e:
                content = f"[无法读取文件: {e}]"
            outfile.write(f"{filepath}：\n【{content}】\n\n")
print(f"文件内容已输出到 {output_file}")
】

.\README.md：
【】

.\WordPopupApp.csproj：
【﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0" />
    <PackageReference Include="ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson" Version="2.3.0" />
    <FrameworkReference Include="Microsoft.WindowsDesktop.App.WindowsForms" />

  </ItemGroup>

</Project>
】

.\WordPopupApp.csproj.user：
【﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup />
</Project>】

.\WordPopupApp.sln：
【﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.14.36212.18 d17.14
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WordPopupApp", "WordPopupApp.csproj", "{447F9C31-11D4-4E59-80AC-FDC5D752943E}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{447F9C31-11D4-4E59-80AC-FDC5D752943E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{447F9C31-11D4-4E59-80AC-FDC5D752943E}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{447F9C31-11D4-4E59-80AC-FDC5D752943E}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{447F9C31-11D4-4E59-80AC-FDC5D752943E}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {7E579AB8-3E00-4E43-BA72-7685CD9D41FC}
	EndGlobalSection
EndGlobal
】

.\.git\COMMIT_EDITMSG：
【first commit
】

.\.git\config：
【[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/qq13456116532/WordPopupApp.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
】

.\.git\description：
【Unnamed repository; edit this file 'description' to name the repository.
】

.\.git\HEAD：
【ref: refs/heads/main
】

.\.git\index：
【[无法读取文件: 'utf-8' codec can't decode byte 0x91 in position 11: invalid start byte]】

.\.git\hooks\applypatch-msg.sample：
【#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:
】

.\.git\hooks\commit-msg.sample：
【#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}
】

.\.git\hooks\fsmonitor-watchman.sample：
【#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}
】

.\.git\hooks\post-update.sample：
【#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info
】

.\.git\hooks\pre-applypatch.sample：
【#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:
】

.\.git\hooks\pre-commit.sample：
【#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
】

.\.git\hooks\pre-merge-commit.sample：
【#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:
】

.\.git\hooks\pre-push.sample：
【#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0
】

.\.git\hooks\pre-rebase.sample：
【#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END
】

.\.git\hooks\pre-receive.sample：
【#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi
】

.\.git\hooks\prepare-commit-msg.sample：
【#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
】

.\.git\hooks\push-to-checkout.sample：
【#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi
】

.\.git\hooks\sendemail-validate.sample：
【#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi
】

.\.git\hooks\update.sample：
【#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
】

.\.git\info\exclude：
【# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
】

.\.git\logs\HEAD：
【0000000000000000000000000000000000000000 963656a582e517403d445d56a814e0f8e86c73d5 Kai Wang <1029306289@qq.com> 1750642166 +0800	commit (initial): first commit
963656a582e517403d445d56a814e0f8e86c73d5 0000000000000000000000000000000000000000 Kai Wang <1029306289@qq.com> 1750642176 +0800	Branch: renamed refs/heads/main to refs/heads/main
963656a582e517403d445d56a814e0f8e86c73d5 963656a582e517403d445d56a814e0f8e86c73d5 Kai Wang <1029306289@qq.com> 1750642176 +0800	Branch: renamed refs/heads/main to refs/heads/main
】

.\.git\logs\refs\heads\main：
【0000000000000000000000000000000000000000 963656a582e517403d445d56a814e0f8e86c73d5 Kai Wang <1029306289@qq.com> 1750642166 +0800	commit (initial): first commit
963656a582e517403d445d56a814e0f8e86c73d5 963656a582e517403d445d56a814e0f8e86c73d5 Kai Wang <1029306289@qq.com> 1750642176 +0800	Branch: renamed refs/heads/main to refs/heads/main
】

.\.git\logs\refs\remotes\origin\main：
【0000000000000000000000000000000000000000 963656a582e517403d445d56a814e0f8e86c73d5 Kai Wang <1029306289@qq.com> 1750642400 +0800	update by push
】

.\.git\objects\00\7b36fefcf994433a6a42c3f9c1e2209e18330d：
【[无法读取文件: 'utf-8' codec can't decode byte 0x95 in position 8: invalid start byte]】

.\.git\objects\05\4885ff0ea1403b1e854e03107e7d5658c8458e：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc1 in position 3: invalid start byte]】

.\.git\objects\08\bb19f98f92ddf9f0a40b2a35cc780abab2477f：
【[无法读取文件: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]】

.\.git\objects\0e\b2989a226a76f4f18dedc9b47a042ad5c3d820：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]】

.\.git\objects\11\5b94938090387e13558022d8a6a9535e5a6fd0：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\11\6a2cfbdc96b49cc82bc0c78f6aca11fdc562ae：
【[无法读取文件: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]】

.\.git\objects\13\a62d0e2adaaec968e0949c6e287eec47311310：
【[无法读取文件: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]】

.\.git\objects\14\91a4b9fc8808ad5e2f160b82466169191d213a：
【[无法读取文件: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte]】

.\.git\objects\15\a5bdb72451b5b85229891fd3265db3c3d9b407：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\17\8dbc075a8df9e15649953fa7a77b29f8ec85f1：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\1a\cad3bb5eecde9ce35c7d2e3e622dc6c7ff8cd0：
【[无法读取文件: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte]】

.\.git\objects\1f\3e06ecfec3545e96657f73ad40a11d7c58b63a：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\22\ea6ad7c29d085ea7727631e9d9dc0bd890109f：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\23\7a7f1ab0fc87acfa27fb9c43c2c28f42493d56：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\25\d7948b75b5fe53f5ccf6415c8aeb7068b4e117：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte]】

.\.git\objects\26\bc3d428b7972d5c16768468de7e83aaa1fee70：
【[无法读取文件: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]】

.\.git\objects\2a\265b24b530b278426929b2867bd13bba389a2b：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\2c\cd01c21fdaeb7109393f94236a133ea6d91305：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\2c\db1ba1f2948849905de7de51415417604fd5a1：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\32\0fd410c2ce056f2453a24bf6a134c2418e0fa9：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]】

.\.git\objects\36\aff1723d04a34ad4488c3c57491e30ac2d0955：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\38\5f88c44a462241b6ef736e3280450b2e5d9bd3：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\38\a59b8685f333de20df17ec572bfdc34e1ecf07：
【[无法读取文件: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte]】

.\.git\objects\39\5f0cf46bb54fb4e9f8ec99f71266db4a92568c：
【[无法读取文件: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte]】

.\.git\objects\39\7ee680e4ac4fc2fd950dec9486afd7af7b493f：
【[无法读取文件: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte]】

.\.git\objects\3f\c74cb36aae06c61ea379167be7f6be51b0f409：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\40\6afaf6c319c10de005f2b7a2d50de2b7ef78d7：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd0 in position 17: invalid continuation byte]】

.\.git\objects\45\b96588eb99b356a53c3d93c41774ba0d2ad746：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\47\b900122bea515899bc41a278279c1ef4f8f432：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\4a\5045de607d6b535f48c080a0a1e252c7ea4652：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte]】

.\.git\objects\4b\7eddd46b9f2094bbb819ef085dd987f5137461：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd4 in position 13: invalid continuation byte]】

.\.git\objects\4e\fc7dc53810f039e9c504071bb196bade8759bb：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\51\3e68be60f439965432cc23ef10b9f58f711808：
【[无法读取文件: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte]】

.\.git\objects\56\17091ab58c9148b87669c0c6505961375a540f：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc7 in position 9: invalid continuation byte]】

.\.git\objects\56\3a649528adc52b545e8fa160fb92531894e2f9：
【[无法读取文件: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]】

.\.git\objects\57\5b3ec4bc530c32a73227b777cfa3930f64cfbf：
【[无法读取文件: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]】

.\.git\objects\57\fe2ddbee3017b53f6ea3b32f6aa7225a76a664：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc8 in position 19: invalid continuation byte]】

.\.git\objects\5b\dfdf302fbac810bc0d53c547be976436eb8a6f：
【[无法读取文件: 'utf-8' codec can't decode byte 0x98 in position 5: invalid start byte]】

.\.git\objects\5c\bc3d3bcd2e35d4a537c7ac833aac9457efd505：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc1 in position 3: invalid start byte]】

.\.git\objects\60\c699e5e88815dcb7b9fb68864b138df9573159：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte]】

.\.git\objects\60\f5203a9f3472668c948c6b38b198046365ae95：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte]】

.\.git\objects\61\67057aed3dff0117f569510d56c74612ba52a8：
【[无法读取文件: 'utf-8' codec can't decode byte 0x98 in position 5: invalid start byte]】

.\.git\objects\61\8b5edec0f134335c069ebf62495a8bc2554c6a：
【[无法读取文件: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte]】

.\.git\objects\62\0fed8d9d98dc960b4b7e512f6cb2b206c9cdfd：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\64\0dc70154402c5cf815ba3bce29fc03d560b4cc：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]】

.\.git\objects\64\11d0bfa96ff965002d788f8c204e113e19c2a4：
【[无法读取文件: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte]】

.\.git\objects\64\dd7e9e0befcd6ef6334ee059447b053747f3be：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\67\143bf4ada833ad1fa6fd176aac7bdf24763c17：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\67\b5c94274e56ff0148f3a03cab16289ca43f3c3：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd1 in position 4: invalid continuation byte]】

.\.git\objects\69\d6970fc1d9d5184cf1078a628367bddb78a07e：
【[无法读取文件: 'utf-8' codec can't decode byte 0x97 in position 15: invalid start byte]】

.\.git\objects\6a\d8a21d52a1916ddb02160cb52bc0fe2080d8cc：
【[无法读取文件: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte]】

.\.git\objects\6b\061f2fc9af19e5ce2e794480226a91e8c7de00：
【[无法读取文件: 'utf-8' codec can't decode byte 0xe7 in position 16: invalid continuation byte]】

.\.git\objects\6c\e28c0a46be05472d1e02e4db131896b8e8ce7c：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]】

.\.git\objects\74\c89e66b78b3b2dcccc227f212a99df6bb6792a：
【[无法读取文件: 'utf-8' codec can't decode byte 0xbe in position 9: invalid start byte]】

.\.git\objects\77\dc035a79cdeb910d7fdee40176b431115f0a07：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\7e\aaac063b6de877720bdc410748f6aee286dc08：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\81\bbf7cebb078a4d3e0b7bf85f3bf5e039c2d7cd：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd0 in position 3: invalid continuation byte]】

.\.git\objects\81\f60000bdc3aa781155a1721de86a1384b993f1：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\82\1578ab6d8da4624cfaca580f5358c963ced42f：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\82\ea44c47587ce6403e86aa754255dba58b1ab67：
【[无法读取文件: 'utf-8' codec can't decode byte 0x86 in position 29: invalid start byte]】

.\.git\objects\83\11e6287e854e1b09dbf9365b9c6811b86dc492：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\83\127ebd82f9156672241cd5d183839b01a68123：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\84\1f5196db14ab0c7e8bb8b6d1006e3e8720272d：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]】

.\.git\objects\85\24f658d3fb551ae6d9eb100193feef30e83ad8：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb7 in position 8: invalid start byte]】

.\.git\objects\85\fc38da2e146ef1dce1a038739c6b9812be0736：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\86\4d7f082e976f028852125d50eb9651199d85f6：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\87\8c677a0019e46efde118cc7d7524ae81ffd9c6：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\88\a550947edbc3c5003a41726f0749201fdb6822：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 3: invalid start byte]】

.\.git\objects\8a\9d0816827be0ad8dad64eb2a77371f603db0e7：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\8b\028ec29a9ac4cefd51cc679af3b70bf63e4f5e：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\8b\47d27a72da1b46e6670ae7154cb0303d1bf521：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte]】

.\.git\objects\8b\58768d5756ae6cf645fa2f8c72f55dbfae8218：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\8f\6614190219adaf669f6b85497dab6017067274：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc8 in position 19: invalid continuation byte]】

.\.git\objects\8f\74855c19055a4c1d1c73b29eca9165e9183c39：
【[无法读取文件: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte]】

.\.git\objects\8f\a033c4447f99b2940eadcc8f6c4c61b374c2a6：
【[无法读取文件: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte]】

.\.git\objects\90\a8489c5f0207ddcc18598dd839a9c0ec27ecf1：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb3 in position 8: invalid start byte]】

.\.git\objects\93\0a624aa5f7b472ff55b4b2e4ccee6d69119fa5：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc8 in position 18: invalid continuation byte]】

.\.git\objects\95\1e3f09ac64c9ca97f0621609a247a90609e688：
【[无法读取文件: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]】

.\.git\objects\96\0685e0064d7aadcb8b30e3ea73050686720500：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcc in position 19: invalid continuation byte]】

.\.git\objects\96\3656a582e517403d445d56a814e0f8e86c73d5：
【[无法读取文件: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]】

.\.git\objects\96\b8659e0be1497b1e0fb29fabc452debcff3ff2：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc1 in position 3: invalid start byte]】

.\.git\objects\98\89ebfd5e79a0fa0975fdfe4b019a3bcdec07af：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\9b\f77fe598a08003e70abc2aaea96a832760d501：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcf in position 18: invalid continuation byte]】

.\.git\objects\9e\31829174b4f7a0ada875ae41073cf53f5f391d：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte]】

.\.git\objects\9e\8f95278ca1f35569083018e596cd51f8758566：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\a5\26b62ec0a48b974115fa373b7024cb708f1799：
【[无法读取文件: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]】

.\.git\objects\ab\453f322aed74d3679e5f38745a07b97af6f5f2：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\ab\82bd0640e42102de2af6098f2b2b5bfc633b7e：
【[无法读取文件: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]】

.\.git\objects\ab\8ad7a8c79b9bbb46c330ebcb1655f042f4a4f6：
【[无法读取文件: 'utf-8' codec can't decode byte 0xdd in position 4: invalid continuation byte]】

.\.git\objects\ac\5a45cf154d0ada60ba349e615b1db062e260fc：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]】

.\.git\objects\b0\57bdbf04cf8c30c745a720d9632d70349f15de：
【[无法读取文件: 'utf-8' codec can't decode byte 0xc1 in position 3: invalid start byte]】

.\.git\objects\b0\d159826b694a8b13598b1455c2c2769e0a9878：
【[无法读取文件: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]】

.\.git\objects\b0\e5752d8f9bb9c1782ab9bb45d30c6c99604176：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte]】

.\.git\objects\b0\ec827578bab22ee9959849b4a2e11ecfc228c0：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb1 in position 4: invalid start byte]】

.\.git\objects\b2\830841be54e72dd7fef0a207c2c6272461e424：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte]】

.\.git\objects\b3\64b2dbaceab7e2ea526e028e21b4f280989148：
【[无法读取文件: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte]】

.\.git\objects\b3\bfa80aff33e8489c841a3faad9235211bb9633：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\b4\f14dccff73167eb8d1a89c88d862e8c577aa3b：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\b5\3c8881bfdb590ebaa250f53d238cff057c1db5：
【[无法读取文件: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte]】

.\.git\objects\b6\22308da35602e96d6e8666d15b36d41f872b3a：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\ba\fa6e13703740f52f6a51023b80075c346447af：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]】

.\.git\objects\bd\bc7967ba1382386487bfa39418a9aa56a42d27：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\c5\f798f559778b4602a208a484ba17ac258f3344：
【[无法读取文件: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte]】

.\.git\objects\c9\054425f7bbefb93d07ce5da7a6c82ce97fda7c：
【[无法读取文件: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte]】

.\.git\objects\cd\d947d31e2660f4e7555ad67e94f31d5c77d3f0：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\cd\ef076ebdde6bbc1a7733515dedbd4e391d9ff7：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\d0\35c38b4edec5c10d4bc421a2dce19f5f998677：
【[无法读取文件: 'utf-8' codec can't decode byte 0xac in position 2: invalid start byte]】

.\.git\objects\d1\1855f13f83de601b0f4b9565897952b2b0f793：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\d1\39edb0ed94a51eb0fd76568594c82d6f88f9d7：
【[无法读取文件: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]】

.\.git\objects\d1\3b28c40e11cce7a8f9cdfbbc68c9105caf71cf：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte]】

.\.git\objects\d5\868d25f925b990d7187480822469f10bb1274e：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\d5\9ea99631cb1a75650bcfeee490129f1d0fd943：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\d8\7706b9f267f96536a53b44c3908f4856235df8：
【[无法读取文件: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]】

.\.git\objects\da\b7a2f5d783339efb567259f1b1e85598cd52b9：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\e1\dca2cd65ceadef130b3b1105a04eb5f640078f：
【[无法读取文件: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]】

.\.git\objects\e2\f87c03cc8ad83ed7cf8a77d3e5f243739a0a3f：
【[无法读取文件: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]】

.\.git\objects\e6\3aa8686332b2bb9982a543d75622eed03522d9：
【[无法读取文件: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]】

.\.git\objects\e6\9de29bb2d1d6434b8b29ae775ad8c2e48c5391：
【[无法读取文件: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]】

.\.git\objects\ed\4caffeba6a49a00609b36b8152b0fc18b24fd4：
【[无法读取文件: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte]】

.\.git\objects\f2\39e826c5e4db7cbdf6aad46fa4702231d661f1：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcf in position 19: invalid continuation byte]】

.\.git\objects\f6\ee9ca012224a4dc1848350d5485368e1aebede：
【[无法读取文件: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]】

.\.git\objects\f7\2792dce9c303367c8e408ab9929762b4f75cc6：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\f9\ca077230045468c1f12751501abd000c82241a：
【[无法读取文件: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]】

.\.git\objects\fa\e05ac9e4b5d17f82e5fa6078350ca4f1eada01：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]】

.\.git\objects\fb\fcf1a268fed0685f2a3864d3b8dd5587c457f5：
【[无法读取文件: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]】

.\.git\objects\fe\da5e9f9c8f6af2b3537ecbf4e9d9586f08afba：
【[无法读取文件: 'utf-8' codec can't decode byte 0xcc in position 3: invalid continuation byte]】

.\.git\refs\heads\main：
【963656a582e517403d445d56a814e0f8e86c73d5
】

.\.git\refs\remotes\origin\main：
【963656a582e517403d445d56a814e0f8e86c73d5
】

.\Models\AnkiModels.cs：
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Collections.Generic;

namespace WordPopupApp.Models
{
    public class AnkiNote
    {
        public string DeckName { get; set; }
        public string ModelName { get; set; } = "WordPopUpNote"; // 固定 note type 名

        public Dictionary<string, string> Fields { get; set; }
        public List<string> Tags { get; set; }
        public AnkiAudio Audio { get; set; }
    }

    public class AnkiAction
    {
        public string Action { get; set; }
        public int Version { get; set; }
        public object Params { get; set; }
    }

    public class AnkiAddNoteAction : AnkiAction
    {
        public AnkiAddNoteAction(AnkiNote note)
        {
            Action = "addNote";
            Version = 6;
            Params = new { note };
        }
    }
}
】

.\Models\AppSettings.cs：
【namespace WordPopupApp.Models
{
    public class AppSettings
    {
        public string AnkiDeckName { get; set; } = "Default";

        // 新增模板字段
        public string CardTemplate { get; set; } = @"
            <div style='font-family:Microsoft YaHei,Arial,sans-serif;font-size:18px;line-height:1.5;padding:10px;background:#f6f8fa;border-radius:10px;'>
                <div style='color:#222;font-weight:bold;font-size:22px;'>{{Word}}</div>
                <div style='margin:10px 0 6px 0;color:#0066cc;'>{{Phonetic}}</div>
                <div style='color:#444;'>{{Definition}}</div>
                <div style='margin-top:12px;color:#aaa;font-size:14px;'>{{Example}}</div>
            </div>
            ";
    }
}】

.\Models\DictionaryModels.cs：
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// 我们将使用免费的 https://dictionaryapi.dev/
// 这个文件是根据其返回的JSON结构创建的
using System.Collections.Generic;

namespace WordPopupApp.Models
{
    public class Phonetic
    {
        public string Text { get; set; }
        public string Audio { get; set; }
    }

    public class Definition
    {
        public string PartOfSpeech { get; set; }
        public List<string> Synonyms { get; set; }
        public List<string> Antonyms { get; set; }
        public string DefinitionText { get; set; } // Renamed from "definition"
        public string Example { get; set; }
    }

    public class Meaning
    {
        public string PartOfSpeech { get; set; }
        public List<Definition> Definitions { get; set; }
    }

    public class DictionaryEntry
    {
        public string Word { get; set; }
        public List<Phonetic> Phonetics { get; set; }
        public List<Meaning> Meanings { get; set; }
    }
}】

.\Services\AnkiService.cs：
【﻿
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using WordPopupApp.Models;

namespace WordPopupApp.Services
{
    public class AnkiService
    {
        private readonly HttpClient _httpClient = new HttpClient { BaseAddress = new Uri("http://127.0.0.1:8765") };

        private async Task<T> InvokeAsync<T>(string action, object parameters = null)
        {
            var payload = new
            {
                action,
                version = 6,
                @params = parameters ?? new { }
            };

            var json = JsonConvert.SerializeObject(payload);
            var resp = await _httpClient.PostAsync("/", new StringContent(json, Encoding.UTF8, "application/json"));
            resp.EnsureSuccessStatusCode();

            var respJson = await resp.Content.ReadAsStringAsync();
            var wrapper = JsonConvert.DeserializeObject<AnkiResponse<T>>(respJson);

            if (wrapper.Error != null)
                throw new InvalidOperationException(wrapper.Error);

            return wrapper.Result;
        }

        private class AnkiResponse<T>
        {
            [JsonProperty("result")] public T Result { get; set; }
            [JsonProperty("error")] public string Error { get; set; }
        }

        public Task<List<string>> GetDeckNamesAsync() => InvokeAsync<List<string>>("deckNames");


        public async Task AddNoteAsync(AnkiNote note)
        {
            var result = await InvokeAsync<long?>("addNote", new { note });
            if (result == null)
                throw new InvalidOperationException("添加笔记失败，Anki 返回 null。");
        }
    }
}
】

.\Services\DictionaryService.cs：
【﻿using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using WordPopupApp.Models;

namespace WordPopupApp.Services
{
    public class DictionaryService
    {
        private readonly HttpClient _httpClient = new HttpClient();
        private const string ApiUrl = "https://api.dictionaryapi.dev/api/v2/entries/en/";

        public async Task<DictionaryEntry> LookupAsync(string word)
        {
            try
            {
                var response = await _httpClient.GetAsync(ApiUrl + word);
                if (!response.IsSuccessStatusCode) return null;

                var json = await response.Content.ReadAsStringAsync();
                // API返回的是一个数组，我们只取第一个结果
                var entries = JsonConvert.DeserializeObject<List<DictionaryEntry>>(json);
                return entries?.FirstOrDefault();
            }
            catch
            {
                return null;
            }
        }
    }
}】

.\Services\GlobalHotKey.cs：
【﻿// 需要引用 System.Windows.Forms
using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Interop;
using Clipboard = System.Windows.Clipboard;

namespace WordPopupApp.Services
{
    public class GlobalHotKey : IDisposable
    {
        [DllImport("user32.dll")]
        private static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);

        [DllImport("user32.dll")]
        private static extern bool UnregisterHotKey(IntPtr hWnd, int id);

        // 使用 SendKeys 模拟 Ctrl+C
        public static void SimulateCtrlC()
        {
            Thread.Sleep(100); // 等待一下，确保焦点在选中的文本上
            SendKeys.SendWait("^c");
            Thread.Sleep(100); // 等待剪贴板内容更新
        }

        public static string GetTextFromClipboard()
        {
            for (int i = 0; i < 5; i++) // 尝试几次以防万一
            {
                try
                {
                    if (Clipboard.ContainsText())
                    {
                        return Clipboard.GetText();
                    }
                }
                catch (COMException)
                {
                    // 剪贴板正被其他进程占用，稍等后重试
                    Thread.Sleep(50);
                }
            }
            return string.Empty;
        }


        private HwndSource _source;
        private readonly int _id;
        private readonly Window _window;

        public event Action HotKeyPressed;

        public GlobalHotKey(Window window, uint modifier, uint key)
        {
            _window = window;
            _id = GetHashCode();

            var helper = new WindowInteropHelper(_window);
            helper.EnsureHandle();
            _source = HwndSource.FromHwnd(helper.Handle);
            _source.AddHook(HwndHook);

            if (!RegisterHotKey(_source.Handle, _id, modifier, key))
            {
                throw new InvalidOperationException("无法注册热键。");
            }
        }

        private IntPtr HwndHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            const int WM_HOTKEY = 0x0312;
            if (msg == WM_HOTKEY && wParam.ToInt32() == _id)
            {
                HotKeyPressed?.Invoke();
                handled = true;
            }
            return IntPtr.Zero;
        }

        public void Dispose()
        {
            _source.RemoveHook(HwndHook);
            UnregisterHotKey(_source.Handle, _id);
        }
    }

    // 定义修饰键常量
    public static class HotKeyModifiers
    {
        public const uint MOD_NONE = 0x0000;
        public const uint MOD_ALT = 0x0001;
        public const uint MOD_CONTROL = 0x0002;
        public const uint MOD_SHIFT = 0x0004;
        public const uint MOD_WIN = 0x0008;
    }
}】

.\Services\SettingsService.cs：
【﻿using Newtonsoft.Json;
using System.IO;

using WordPopupApp.Models;

namespace WordPopupApp.Services
{
    public class SettingsService
    {
        private readonly string settingsFile = "settings.json";
        private readonly string defaultTemplate = @"
    <div style='font-family:Microsoft YaHei,Arial,sans-serif;font-size:18px;line-height:1.5;padding:10px;background:#f6f8fa;border-radius:10px;'>
        <div style='color:#222;font-weight:bold;font-size:22px;'>{{Word}}</div>
        <div style='margin:10px 0 6px 0;color:#0066cc;'>{{Phonetic}}</div>
        <div style='color:#444;'>{{Definition}}</div>
        <div style='margin-top:12px;color:#aaa;font-size:14px;'>{{Example}}</div>
    </div>
    ";
        public AppSettings LoadSettings()
        {
            if (File.Exists(settingsFile))
            {
                var json = File.ReadAllText(settingsFile);
                var settings = JsonConvert.DeserializeObject<AppSettings>(json);
                if (string.IsNullOrEmpty(settings.CardTemplate))
                    settings.CardTemplate = defaultTemplate;
                return settings;
            }
            return new AppSettings
            {
                CardTemplate = defaultTemplate
            };
        }

        public void SaveSettings(AppSettings settings)
        {
            var json = JsonConvert.SerializeObject(settings, Formatting.Indented);
            File.WriteAllText(settingsFile, json);
        }
    }

}】

.\ViewModels\PopupResultViewModel.cs：
【﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using WordPopupApp.Services;
using WordPopupApp.Models;

namespace WordPopupApp.ViewModels
{
    public partial class PopupResultViewModel : ObservableObject
    {
        [ObservableProperty]
        private bool isLoading = true;

        [ObservableProperty]
        private string word;

        [ObservableProperty]
        private string phoneticText;

        [ObservableProperty]
        private string definitionText;

        [ObservableProperty]
        private bool hasAudio;

        private string audioUrl;
        private DictionaryEntry _fullEntry;
        private readonly AnkiService _ankiService;
        private readonly AppSettings _settings;

        public PopupResultViewModel(DictionaryEntry entry, AnkiService ankiService, AppSettings settings)
        {
            _fullEntry = entry;
            _ankiService = ankiService;
            _settings = settings;   

            IsLoading = false;

            if (entry == null)
            {
                Word = "未找到";
                DefinitionText = "无法查询到该单词或短语的释义。";
                return;
            }

            Word = entry.Word;

            var phonetic = entry.Phonetics?.FirstOrDefault(p => !string.IsNullOrEmpty(p.Text));
            PhoneticText = phonetic?.Text ?? "";

            var audio = entry.Phonetics?.FirstOrDefault(p => !string.IsNullOrEmpty(p.Audio));
            audioUrl = audio?.Audio;
            HasAudio = !string.IsNullOrEmpty(audioUrl);

            var sb = new StringBuilder();
            foreach (var meaning in entry.Meanings)
            {
                sb.AppendLine($"▶ {meaning.PartOfSpeech}");
                foreach (var def in meaning.Definitions.Take(3)) // 最多显示3条释义
                {
                    sb.AppendLine($"  - {def.DefinitionText}");
                    if (!string.IsNullOrEmpty(def.Example))
                    {
                        sb.AppendLine($"    e.g. {def.Example}");
                    }
                }
                sb.AppendLine();
            }
            DefinitionText = sb.ToString().Trim();
        }

        [RelayCommand]
        private void PlayAudio()
        {
            if (HasAudio)
            {
                // 使用一个临时的 MediaElement 播放音频
                var mediaElement = new MediaElement { Volume = 1 };
                mediaElement.LoadedBehavior = MediaState.Play;
                mediaElement.Source = new System.Uri(audioUrl, System.UriKind.Absolute);
            }
        }

        [RelayCommand]
        private async Task AddToAnki()
        {
            if (_fullEntry == null) return;

            // 1) 生成音频文件名
            var fileName = $"{Word}_{DateTimeOffset.Now.ToUnixTimeSeconds()}.mp3";

            // 2) 构造 note，字段与模板一一对应
            var note = new AnkiNote
            {
                DeckName = _settings.AnkiDeckName,
                Fields = new Dictionary<string, string>
                {
                    { "单词", $"{Word} {PhoneticText}<br>[sound:{fileName}]" },
                    { "释义", DefinitionText.Replace("\n", "<br/>") },
                    { "笔记", "" },
                    { "例句", "" }
                },
                Tags = new List<string> { "WordPopupApp" },
                Audio = HasAudio
                    ? new AnkiAudio
                      {
                          Url = audioUrl,
                          Filename = fileName,
                          Fields = new List<string> { "单词" }
                      }
                    : null
            };

            await _ankiService.AddNoteAsync(note);
        }
    }
}】

.\Views\PopupResultWindow.xaml：
【﻿<Window x:Class="WordPopupApp.Views.PopupResultWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WordPopupApp.Views"
        mc:Ignorable="d"
        Title="查询结果" Height="250" Width="400"
        WindowStyle="None" AllowsTransparency="True" Background="Transparent"
        ShowInTaskbar="False" Topmost="True" ResizeMode="NoResize"
        Deactivated="Window_Deactivated" MouseLeave="Window_MouseLeave"
        FontFamily="Microsoft YaHei UI">
    <Border Background="#F0FFFFFF" CornerRadius="8" BorderThickness="1" BorderBrush="#CCCCCC">
        <Border.Effect>
            <DropShadowEffect ShadowDepth="0" BlurRadius="10" Color="#AAAAAA" Opacity="0.5"/>
        </Border.Effect>
        <Grid Margin="15">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center">
                <TextBlock Text="{Binding Word}" FontSize="24" FontWeight="Bold" Foreground="#222222"/>
                <TextBlock Text="{Binding PhoneticText}" FontSize="16" VerticalAlignment="Center" Margin="10,0,0,0" Foreground="#555555"/>
            </StackPanel>

            <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,5,0,10">
                <Button Content="🔊 UK" Command="{Binding PlayAudioCommand}" IsEnabled="{Binding HasAudio}" Margin="0,0,5,0" Padding="5,2"/>
            </StackPanel>

            <ScrollViewer Grid.Row="2" VerticalScrollBarVisibility="Auto">
                <TextBlock Text="{Binding DefinitionText}" TextWrapping="Wrap" FontSize="14" Foreground="#333333"/>
            </ScrollViewer>

            <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                <Button Content="+ Anki" Padding="10,3" Command="{Binding AddToAnkiCommand}"/>
            </StackPanel>

            <TextBlock Text="正在查询..." Grid.Row="0" Grid.RowSpan="4" FontSize="18"
                       HorizontalAlignment="Center" VerticalAlignment="Center"
                       Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"/>

        </Grid>
    </Border>
</Window>】

.\Views\PopupResultWindow.xaml.cs：
【﻿using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Input;

namespace WordPopupApp.Views
{
    public partial class PopupResultWindow : Window
    {
        // P/Invoke for getting mouse position
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal static extern bool GetCursorPos(ref Win32Point pt);

        [StructLayout(LayoutKind.Sequential)]
        internal struct Win32Point
        {
            public int X;
            public int Y;
        };

        public static Point GetMousePosition()
        {
            var w32Mouse = new Win32Point();
            GetCursorPos(ref w32Mouse);
            return new Point(w32Mouse.X, w32Mouse.Y);
        }

        public PopupResultWindow()
        {
            InitializeComponent();
        }

        public void SetPositionAndShow()
        {
            var mousePosition = GetMousePosition();
            this.Left = mousePosition.X + 15; // 在鼠标右侧显示
            this.Top = mousePosition.Y + 15;  // 在鼠标下方显示

            // 确保窗口不会超出屏幕边界
            ValidatePosition();

            this.Show();
            this.Activate();
        }

        private void ValidatePosition()
        {
            double screenWidth = SystemParameters.VirtualScreenWidth;
            double screenHeight = SystemParameters.VirtualScreenHeight;

            if (this.Left + this.Width > screenWidth)
            {
                this.Left = screenWidth - this.Width - 15;
            }
            if (this.Top + this.Height > screenHeight)
            {
                this.Top = screenHeight - this.Height - 15;
            }
        }


        // 窗口失去焦点时自动关闭
        private void Window_Deactivated(object sender, System.EventArgs e)
        {
            this.Close();
        }

        // 鼠标离开窗口时自动关闭（提供多一种关闭方式）
        private void Window_MouseLeave(object sender, MouseEventArgs e)
        {
            this.Close();
        }
    }
}】

.\Views\TemplateEditWindow.xaml：
【<Window x:Class="WordPopupApp.Views.TemplateEditWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="编辑卡片模板" Height="400" Width="500">
    <Grid Margin="10">
        <TextBox x:Name="TemplateBox" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" 
                 HorizontalScrollBarVisibility="Auto" FontFamily="Consolas" FontSize="14"/>
        <Button Content="保存" HorizontalAlignment="Right" VerticalAlignment="Bottom" 
                Margin="0,0,0,10" Width="80" Click="Save_Click"/>
    </Grid>
</Window>】

.\Views\TemplateEditWindow.xaml.cs：
【using System.Windows;

namespace WordPopupApp.Views
{
    public partial class TemplateEditWindow : Window
    {
        public string TemplateText { get; private set; }

        public TemplateEditWindow(string initialTemplate)
        {
            InitializeComponent();
            TemplateBox.Text = initialTemplate;
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
            TemplateText = TemplateBox.Text;
            this.DialogResult = true;
        }
    }
}】

